/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Model.Matrix;
import Util.IntialNewMatrix;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author lhr
 */
public class GameOfLifeJFrame extends javax.swing.JFrame {
    
    private int maxGeneration = 10;
    private Matrix cellMatrix;
    private JPanel gridPanel = new JPanel();
    private JTextField[][] textMatrix;
    /**
     * Creates new form GameOfLifeJFrame
     */
    public GameOfLifeJFrame() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    /*
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameOfLifeJFrame().setVisible(true);
                while (cellMatrix.getGeneration() < maxGeneration){
                    cellMatrix.transform();
                    showMatrix();
                    //gridPanel.updateUI();
                    try {
                        TimeUnit.MILLISECONDS.sleep(10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GameOfLifeJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }
    */
    
     public void initGridLayout() {
        int rows = cellMatrix.getHeight();
        int cols = cellMatrix.getWidth();
        gridPanel = new JPanel();
        gridPanel.setLayout(new GridLayout(rows, cols));
        textMatrix = new JTextField[rows][cols];
        
        Random random= new Random();
        for (int y = 0; y < rows; y++) {
            for (int x = 0; x < cols; x++) {
                JTextField text = new JTextField();
                textMatrix[y][x] = text;
                gridPanel.add(text);
            }
        }
        setContentPane(gridPanel);
        //add("Center", gridPanel);
    }
     
    
     private void showMatrix() {
        
        int rows = cellMatrix.getHeight();
        int cols = cellMatrix.getWidth();
        gridPanel = new JPanel();
        gridPanel.setLayout(new GridLayout(rows, cols));
        textMatrix = new JTextField[rows][cols];
        int[][] matrix = cellMatrix.getMatrix();

        for (int y = 0; y < rows; y++) {
            for (int x = 0; x < cols; x++) {
                JTextField text = new JTextField();
                if (matrix[y][x] == 1) text.setBackground(Color.BLACK);
                    else text.setBackground(Color.WHITE);
                gridPanel.add(text);
            }
        }
        //setContentPane(gridPanel);
        /*
        int[][] matrix = cellMatrix.getMatrix();
        for (int y = 0; y < matrix.length; y++) {
            for (int x = 0; x < matrix[0].length; x++) {
                if (matrix[y][x] == 1) {
                    textMatrix[y][x].setBackground(Color.BLACK);
                } else {
                    textMatrix[y][x].setBackground(Color.WHITE);
                }
            }
        }
        */
    }

    public int getMaxGeneration() {
        return maxGeneration;
    }

    public void setMaxGeneration(int maxGeneration) {
        this.maxGeneration = maxGeneration;
    }

    public Matrix getCellMatrix() {
        return cellMatrix;
    }

    public void setCellMatrix(Matrix cellMatrix) {
        this.cellMatrix = cellMatrix;
    }

    public JPanel getGridPanel() {
        return gridPanel;
    }

    public void setGridPanel(JPanel gridPanel) {
        this.gridPanel = gridPanel;
    }

    public JTextField[][] getTextMatrix() {
        return textMatrix;
    }

    public void setTextMatrix(JTextField[][] textMatrix) {
        this.textMatrix = textMatrix;
    }
     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
